{"componentChunkName":"component---src-templates-blog-post-js","path":"/utility-spacing","webpackCompilationHash":"c8cd0c9731ff203d2531","result":{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/utility-spacing\",\n  \"date\": \"2019-07-02\",\n  \"title\": \"Responsive utility CSS spacing\",\n  \"tags\": [\"CSS\", \"SASS\", \"Webpack\", \"Tailwind\"],\n  \"excerpt\": \"Making a set of Tailwind inspired responsive spacing utility classes with SASS\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The problem\"), mdx(\"p\", null, \"When a designer is working on a UI in something like Sketch they will get the spacing to look how they want, normally based on a pre-defined spacing scale.\"), mdx(SideScroller, {\n    mdxType: \"SideScroller\"\n  }, mdx(Spacer, {\n    size: 16,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 20,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 24,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 48,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 56,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 72,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 96,\n    mdxType: \"Spacer\"\n  }), mdx(Spacer, {\n    size: 128,\n    mdxType: \"Spacer\"\n  })), mdx(\"h2\", null, \"Fist solution - Spacing SASS variables and a class for each\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-SCSS\"\n  }), \"$space-1: 8px;\\n$space-2: 16px;\\n$space-3: 20px;\\n$space-4: 24px;\\n$space-5: 32px;\\n$space-6: 40px;\\n$space-7: 48px;\\n$space-8: 56px;\\n$space-9: 64px;\\n$space-10: 72px;\\n\")), mdx(\"p\", null, \"These are useful for making sure no \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://css-tricks.com/magic-numbers-in-css/\"\n  }), \"magic-numbers\"), \" are used and also for stepping up or down the scale to give more or less space in an intuitive way.\"), mdx(\"p\", null, \"There are a few problems with doing with variables alone:\\n1. You will write a specific class for  every use, even if al you are doing is adding a little margin.\\n2. The specific class will need to be set at breakpoints\\n3. The spacing is the most likely thing to change when a designer is reviewing a UI. Not because its wrong but because of the differences of rendering in design software with sometimes placeholder content and a browser with real content.\"), mdx(\"h2\", null, \"Second solution - Responsive classes\"), mdx(\"p\", null, \"You could make a set of responsive utilities, but unfortunately the spacing on mobile can't just be scaled up in a programmatic way to produce a desktop layout. There is as much art as science to the whitespace and you may even use a completely different layout a larger sizes anyway.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-SCSS\"\n  }), \"$space-5: 32px;\\n$space-shrink-factor-sm: 0.8;\\n\\n\\n.margin-b-5 {\\n    \\n    margin-bottom: $space-5 * $space-shrink-factor-small;\\n    \\n    @media screen and ( min-width: 640px) {\\n        margin-bottom: $space-5;\\n    }\\n\\n}\\n\")), mdx(\"h2\", null, \"Third solution - Fully responsive set of utilities\"), mdx(\"p\", null, \"After reading the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://2019.stateofcss.com/\"\n  }), \"State of CSS 2019\"), \" I saw that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tailwindcss.com/\"\n  }), \"Tailwindcss\"), \" had a very high satisfaction rating. There is an ongoing debate on weather CSS utilities are a good thing or not, but my view is that in some cases they are too useful to ignore. I really loved the syntax of the Tailwind so I made a set of utilities that followed the same \", \"[breakpoint]\", \":\", \"[utility]\", \" format in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codepen.io/jqim/pen/ydLpVB\"\n  }), \"Codepen\"), \". \"), mdx(\"p\", null, \"I wanted to make another version with Webpack as a learning exercise.\"), mdx(\"p\", null, \"Here is how it works ...\"), mdx(\"h3\", null, \"A sass map of your breakpoints\"), mdx(\"p\", null, \"These could be be hooked into an existing set of breakpoints in your frontend code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-SCSS\"\n  }), \"$breakpoints:(\\n  md: 640px,\\n  lg: 1024px,\\n  xl: 1200px,\\n  xxl: 1440px\\n);\\n\")), mdx(\"h3\", null, \"A sass map of your spacing values\"), mdx(\"p\", null, \"I find these are best to be hard-coded as variables as the almost never change once set by a designer. Also sometimes a designer will throw logic to the wind and break the mathematical pattern at certain points because sometimes logic doesn't look visually pleasing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-SCSS\"\n  }), \"/* The variables can be used in component .classes */\\n$space-1: 8px;\\n$space-2: 16px;\\n$space-3: 20px;\\n...\\n\\n/* The map is for looping over */\\n$space: (\\n    1: $space-1,\\n    2: $space-2,\\n    3: $space-3,\\n    ...\\n);\\n\")), mdx(\"h3\", null, \"A breakpoint mixin to use in the loop\"), mdx(\"p\", null, \"You will need a way to programmatically wrap classes in a breakpoint.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-SCSS\"\n  }), \"@mixin breakpointWrap($screenSize) {\\n  \\n  @media screen and ( min-width: map-get($breakpoints, $screenSize) ) {\\n    @content;\\n  }\\n  \\n};\\n\")), mdx(\"h3\", null, \"A loop function to build all the utilities\"), mdx(\"p\", null, \"Then a nested for loop of the breakpoints -> spacing values -> .classes\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-SCSS\"\n  }), \"@each $bpKey, $bgVal in $breakpoints {\\n\\n  @include breakpointWrap($bpKey){\\n\\n    @each $sKey, $sVal in $space {\\n      .#{$bpKey}--m-#{$sKey}{\\n        margin: $sVal;\\n      }\\n        .#{$bpKey}--m-b-#{$sKey}{\\n          margin-bottom: $sVal;\\n        }\\n        ...\\n        /* + top, left and right */\\n      \\n      .#{$bpKey}--p-#{$sKey} {\\n        padding: $sVal;\\n      }\\n        .#{$bpKey}--p-b-#{$sKey} {\\n        padding-bottom: $sVal;\\n        }\\n        ...  \\n        /* + top, left and right */\\n    };\\n    \\n  };\\n\\n};\\n\")), mdx(\"p\", null, \"I opted to leave the base 'small' size out of the loops so didn't have to include any conditions.\"), mdx(\"h3\", null, \"File size worries\"), mdx(\"p\", null, \"This can produce a surprizing amount of CSS even when you are sure you only included the useful stuff.\"), mdx(Calculator, {\n    mdxType: \"Calculator\"\n  }), mdx(\"p\", null, \"500 css classes and weighted in at about 24kb, which seems like a lot for something so simple.\"), mdx(\"h4\", null, \"Calculator\"), mdx(\"h3\", null, \"Purge css\"), mdx(\"p\", null, \"But you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/FullHuman/purgecss-webpack-plugin\"\n  }), \"purgecss-webpack-plugin\"), \" to removed unused classes from your source files. I found it takes a few seconds for webpack to do this, so it's probably best left to a production build only. Or this might be better as a NPM script.\"), mdx(\"p\", null, \"Have a look at the working example on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jimmaclean/utility-spacing\"\n  }), \"GitHub\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Responsive utility CSS spacing"},"id":"9410aa9b-24ed-5be1-82b4-558592ecd9dc"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"9410aa9b-24ed-5be1-82b4-558592ecd9dc"}}}